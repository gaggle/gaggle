<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jon Lauridsen</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jonlauridsen.com/"/>
  <updated>2017-04-17T10:21:01.631Z</updated>
  <id>http://jonlauridsen.com/</id>
  
  <author>
    <name>Jon Lauridsen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>(Don&#39;t) Put it on the backlog</title>
    <link href="http://jonlauridsen.com/blog/2017/dont-put-it-on-the-backlog/"/>
    <id>http://jonlauridsen.com/blog/2017/dont-put-it-on-the-backlog/</id>
    <published>2017-04-06T21:58:02.000Z</published>
    <updated>2017-04-17T10:21:01.631Z</updated>
    
    <content type="html"><![CDATA[<p>How do you harness ideas for your product?
Whether ideas come from customer feedback
or someone in the office having a light bulb moment
you’re probably receiving a stream of feature-suggestions
that are worth considering.
But what to do with them?
There are many good answers to that,
but capturing them as stories in your backlog <em>isn’t</em> one of them.</p>
<a id="more"></a>
<p>I’ve done that myself,
captured every idea as a story.
I diligently wrote down what someone suggested,
thanked them,
and added the new card to the backlog.
Job’s done, right?
No,
I now think creating a new story for every idea
is actually an anti-pattern.
Initially it appears great
because it lets stakeholders prioritise a new idea
against the current workload,
and the person with the idea feels listened to
because this work-item has appeared as a result of their input.
But ideation flows much faster than development,
and soon the backlog balloons with all kinds of ideas.</p>
<p>Even then this can <em>still</em> look fine,
because tasks are prioritised
so the more frivolous ideas fall the bottom
and we all agree we’ll eventually get to those less important ones later, right?
But before long years worth of ill-defined and half-forgotten stories
accrue in the basement of that backlog,
to the point where no-one really has an overview of what exactly is in there,
and honestly you’re unlikely to ever get to them.</p>
<blockquote>
<p>At CCP we loved the <a href="https://en.wikipedia.org/wiki/MoSCoW_method" target="_blank" rel="external">MoSCoW</a> method,
and the main product had a decade of ideas captured across all possible technologies.
For the backlog I maintained I would received a new idea
and the team would all agree this was a really good one to do,
so we’d put it just below all the absolutely business-critical must stories
that needed finishing first.
We truly wanted to get to do those ideas,
but there was always business-critical must stories that took priority.
The so-called good ideas just sat there.
Forever.
We never did get to them.</p>
</blockquote>
<p>The main problem of having a basement full of stories
is the impact they have on your ability to react to changing market forces.
Successful software must continuously maximise customer impact
so it makes sense that new stories appear with little warning.
Thus there is a tipping-point
where new higher-priority stories come in at a faster rate
than the churn through your basement-stories.
At that point those basement-stories just go stale, and they go stale <em>quick</em>.
If they’re continuously being bumped then what value are they really bringing?</p>
<p>If an idea is truly valuable then of course create a story and get to work,
but when they’re repeatedly deferred into an ill-defined future
by dumping them into a deprioritised column
or putting them at such a depth that they’ll never realistically be worked on
then they become a liability.
Dragging around all that baggage has cost,
both mentally as various people must get acquainted with all the items,
and operationally as it becomes more difficult to use the software
(searching is slower and results more overwhelming,
and changing a process becomes more daunting because
the dataset is larger, etc.).</p>
<p>The solution is to limit the backlog.
Only write up the stories you’re actually going to work on,
and if a story is continuously bumped maybe throw it out?
If it’s not the right time for an idea then be honest about it,
and trim that fat out.</p>
<p>I haven’t tried this yet,
but I’m personally drawn to the idea of “<a href="http://searchsoftwarequality.techtarget.com/definition/WIP-limit" target="_blank" rel="external">WIP-limiting</a>” the backlog itself.
Given your velocity you can project how long the backlog is,
so put in a reasonable limit.
If stakeholders love a new idea then it has to replace an existing story,
which I think would drive up the value of the backlog
because each item in it really has to justify its existence.</p>
<h1>Idea wall</h1>
<p>With that said I do firmly believe in capturing those ideas.
Everyone is a source of ideation,
especially people in your office if you dog-food your own product,
and it’d be negligent to not tap all those brains for improvements.
I personally like blogging as a way to disseminate ideas,
they’re a nice informal way to drive discussion
and let others build on an idea or add further thoughts and constraints to consider.
I’ve also seen this tackled with a big idea-wall,
basically a wall of post-its
highlighting the high-level goals we all want to push towards.</p>
<p>Regardless of how you capture those ideas
the end goal should be to inspire stakeholders
but not have them beholden to the list.
The ideal outcome is a soup of ideas
that continuously combine and interact in unpredictably creative ways,
where the best ideas attracts attention
and are naturally iterated on from many perspectives.
And then only when the time is right are they pulled into the backlog,
where they’ll be further refined
and start their ascend towards actually being made real.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;How do you harness ideas for your product?
Whether ideas come from customer feedback
or someone in the office having a light bulb moment
you’re probably receiving a stream of feature-suggestions
that are worth considering.
But what to do with them?
There are many good answers to that,
but capturing them as stories in your backlog &lt;em&gt;isn’t&lt;/em&gt; one of them.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Office as Code</title>
    <link href="http://jonlauridsen.com/blog/2017/office-as-code/"/>
    <id>http://jonlauridsen.com/blog/2017/office-as-code/</id>
    <published>2017-03-19T13:02:43.000Z</published>
    <updated>2017-04-17T10:21:01.631Z</updated>
    
    <content type="html"><![CDATA[<p>Once upon a time developers would finish code
and just chuck it over the wall to operations,
relying on them to deploy and maintain the system.
Then as <em>#devops</em> and <em>infrastructure-as-code</em> became popular
developers got to iterate on,
and take responsibility for,
all those important downstream concerns
that affect customers.</p>
<p>What about <em>upstream</em> concerns though?
Think of all the office-processes that shape the environment we work in,
they drive how efficient and happy we are in our daily work
but I’ve often found them difficult to change.
What would it look like if we applied some of the same thoughts to those factors?</p>
<a id="more"></a>
<h1>The problem</h1>
<p>I’ve suggested changes to offices I’ve worked in,
but my efforts have regularly failed
because the office-processes weren’t set up to accept changes.</p>
<p>For example:</p>
<ul>
<li><em>What software comes pre-installed on new machines?</em>
Old or missing applications
are annoying to deal with again and again,
but to change the list
I would have had to persuade someone from IT
to go through a bothersome process
of updating an old image they restore from.</li>
<li><em>Which sodas are stocked in the fridge?</em>
I’ve had trouble just finding the person responsible,
and then they weren’t open for suggestions
because they felt the current solution was good enough.</li>
<li><em>What should a new hire do to get started as quickly as possible?</em>
This is often a list somewhere,
but rarely is it up-to-date or even easy to follow.
I found most regulars had not read it since they started themselves.</li>
<li><em>What’s the coding style?</em>
This too is often written down,
but how can I provide my feedback to promote best-practices?
I want to make a change-proposal that should be discussed
before forcing it on everyone.</li>
</ul>
<p>I think the fundamental problem I encountered
is that many office-processes are rigid,
instead of being set up for iterative improvements.
A process that supports iterative improvements
should have a change-management structure that welcomes small, well-defined incremental steps,
where each successful step becomes the baseline that everyone adopts.
In contrast a process becomes rigid
when it’s controlled by whoever happens to be doing it
and there is no system for improvement.</p>
<p>In those situations
it doesn’t matter if you talk to the person directly,
email them,
or have a fancy ticketing system,
it all comes down to the same problem:
If they feel the current system works well enough
then your unsolicited suggestion is not worth implementing.
Their workflow may even be archaic and ineffective
so your “simple” suggestion could be complicated to implement.
And to play devil’s advocate,
why <em>should</em> your suggestion be listened to?
How can you prove you speak for everyone your suggestion affects?</p>
<p>Rigid processes easily end up amplifying dysfunctions,
doing nothing to avoid those pitfalls.</p>
<h2>The Wiki</h2>
<p>We need a quick detour into wikis before proceeding.
If a process is described in a wiki then that’s good right?
I don’t think so,
wikis really aren’t fit for describing processes at all:</p>
<p>First,
it’s rare a wiki page is the <em>source</em> of information,
most pages are the <em>output</em> of a decision
and whoever performs the task doesn’t actually look at that page anymore
(and many pages thus grow totally inaccurate over time).
Editing a page like that will have little effect,
if no-one actually reads it why bother updating it?</p>
<p>And secondly
wiki edits go live immediately,
but that cuts out the critical discussion step.
Without discussion
changes will go in that some people are unaware of
or disagree with,
and so the change is not effective.</p>
<p>Thirdly,
it can be intimidating to alter someone’s text
(especially as a new hire)
which further limits which suggestions you get.
A new hire is unlikely to suggest a radically different approach to a process,
even if they have a great idea to suggest.</p>
<h1>The solution</h1>
<p>I’m looking for a way to solve for the following challenges:</p>
<ul>
<li>How do you <em>know</em> how well your current process works?
There should be room for discussion,
a platform with low barriers of entry that invites suggestions.</li>
<li>How can you tell which are popular suggestions?
There should be an easy way for others to passively show support,
like a voting-system.</li>
<li>How is the process optimized over time?
If a process can be done by anyone,
by following a series of steps,
then it will benefit from many more eyes on the process,
and the steps can be optimized over time.</li>
</ul>
<p>That… actually sounds a lot like a <em>pull-request</em>,
doesn’t it?
A pull-request is a safe space for changes of any size to be discussed
and broad consensus reached
<em>before</em> merging it in.
That means every interested party is kept up-to-date and in agreement,
and it vastly lowers the barrier of entry for suggesting changes
because a pull-request is just a request,
it’s safe to suggest big changes
or come up with a rough outline
and hash out the details in public.
Pull-requests also invite remixing
when other people branch off your change to inject their suggestions.
And of course repositories exists within an ecosystem of tools and libraries
that facilitate powerful automation.</p>
<h2>Everything’s a repository</h2>
<p>So let’s try an experiment,
can we take our examples from before
and somehow turn them into “office-code”?</p>
<p>The most critical change is a cultural one:
We must be able to capture a process
such that the captured information is the <strong>source</strong> of information,
because no amount of tooling can reach what only exists in the heads of a few individuals.
Changing culture can be hard,
but it all starts with changing what people <em>do</em>.
I think if we use a tool that’s designed for being the source of information,
i.e., repositories,
then it makes it easier for everyone to grok this idea.</p>
<p>I propose we don’t need to capture computer-executable code though,
that’d be taking the repository-thinking too literally.
To start with it’ll be enough to capture these details as “human-executable” instructions,
and focus on a culture of open discussions,
iterative improvement,
and broaden the set of people who performs the task.</p>
<hr>
<p>So, how do we deal with pre-installed software?
To cover the basics we can provide a link to the OS image
and a description of how to format and reset machines.
At least this way anyone can reset machines without having to contact IT.</p>
<p>To better use the power of repositories we can add some automation.
What if applications were specified as installation-scripts
(e.g. <a href="https://www.chef.io/chef/" target="_blank" rel="external">Chef</a>)?
And we re-generate the disk image whenever <code>master</code> is updated.
That would make it simple for anyone to add or update preinstalled applications,
and it’s the kind of automation that’s straightforward to do in a repository.</p>
<hr>
<p>Same approach for the office fridge.
Forget about someone keeping an arbitrary list on their desk,
now we have a <code>fridge-stocking.git</code> repo
containing the necessary steps to make and change orders.
If we specify the actual sodas to order in a separate file
it’ll be easy to propose stocking a specific drink
by just creating a pull-request.</p>
<p>For expense reasons maybe the power to purchase is limited to one person,
but they can look at the rich feedback in a pull-request,
like its comments and how many thumbs-up it has,
to decide which requests to merge in and which to deny.</p>
<hr>
<p>Capturing new-hire checklists
and the coding-style
into repositories
means we can use those pull-requests for suggesting changes.
Each change can be thoroughly discussed,
so when it’s merged in
everyone is onboard with it.</p>
<p>With such an inviting change-management approach
perhaps we can even consider a new rule:
What if every new hire is asked to make pull-requests
for every topic they feel a previous company did better?
So as a new hire your first task would be
to go through all the office-as-code repositories
and submit pull-requests describing your best experiences from past companies.
Then we all discuss those changes
and we merge in the ideas we love.</p>
<p>Wouldn’t that be a pretty elegant way
of ensuring continuous improvements of the office?</p>
<h1>In conclusion</h1>
<p>Why bother with any of this though?
Is it really that important?
Doesn’t your office work just fine the way it is?
Well… I don’t know, does it?
Seriously I’d love to hear your experiences,
please leave a comment
so I can expand my horizons.</p>
<p>But I’ve felt most office-processes have been beyond my control,
and when they operate less than ideally
it’s a small but persistent annoyance to be unable to change it.
I’ve tried reaching out with suggestions
but usually get ignored or declined because of course everyone’s busy.
It takes a lot of effort to persuade a person
to change the way they’ve done something for years,
and without a platform for discussion
it’s not even really possible to show how broadly supported a suggestion is.</p>
<p>Wikis may appear to be a solution
but they actually fail to capture processes
because of their limited change-model.</p>
<p>Of course not everything can or should be solved by tools,
but when there’s an opportunity to simplify how we work
<em>and</em> better align processes to evolve iteratively
why not give it a try?</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Once upon a time developers would finish code
and just chuck it over the wall to operations,
relying on them to deploy and maintain the system.
Then as &lt;em&gt;#devops&lt;/em&gt; and &lt;em&gt;infrastructure-as-code&lt;/em&gt; became popular
developers got to iterate on,
and take responsibility for,
all those important downstream concerns
that affect customers.&lt;/p&gt;
&lt;p&gt;What about &lt;em&gt;upstream&lt;/em&gt; concerns though?
Think of all the office-processes that shape the environment we work in,
they drive how efficient and happy we are in our daily work
but I’ve often found them difficult to change.
What would it look like if we applied some of the same thoughts to those factors?&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>The Trouble with Python Packaging</title>
    <link href="http://jonlauridsen.com/blog/2016/the-trouble-with-python-packaging/"/>
    <id>http://jonlauridsen.com/blog/2016/the-trouble-with-python-packaging/</id>
    <published>2016-12-19T00:47:09.000Z</published>
    <updated>2017-04-17T10:21:01.627Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve long wished Python allowed easier handling of multiple projects and their dependencies.
You know how you create a folder, fill it with code, and want to share it with others?
Or maybe it’s a library to pull into your application as a dependency,
instead of making one huge monolithic product?
Python has <code>virtualenv</code> and <code>pip</code> for this,
<code>virtualenv</code> for creating isolated environments
and <code>pip</code> for downloading and managing dependencies.
But they are not easy to learn, nor easy to use daily,
and I dream of a better alternative.</p>
<a id="more"></a>
<p>Before I go on though,
I want to state how grateful I am that <code>virtualenv</code> and <code>pip</code> exists at all.
They represent countless hours of development
and are good pragmatic solutions written by people much, much smarter than me.</p>
<p>During the writing of this blog its dawned on me that I’m probably missing some insights
that explain why our tools work the way they do.
If you can help fill in these blanks I’m all ears.</p>
<h1>The problem</h1>
<p>So what is it I’m complaining about?
There are 3 distinctly troubled areas to go through:</p>
<h2>virtual<em>wha</em>??</h2>
<blockquote class="pullquote right"><p>What if I just don’t use them?</p>
</blockquote>
<p>To start a Python project today you must first create a new <code>virtualenv</code>, but what is that?
After reading about it we learn it’s a way to isolate my Python environment,
but what does <em>that</em> mean?</p>
<p>At first glance a <code>virtualenv</code> is this thing that puts my terminal in a different state,
and if I don’t activate it nothing works.
And I have to keep activating it everytime I open a terminal?</p>
<img src="/blog/2016/the-trouble-with-python-packaging/venv-activate.gif" alt="venv-activate.gif" title="">
<p>What if I just don’t use them?
Then all my dependencies go to my system’s Python folder
and cause a mess for other projects I work on…
But hang on, what if I <strong>forget</strong> to activate it then? How do I even clean up the resulting mess?</p>
<p><code>virtualenv</code> is a brittle platform to learn from
because any missteps send me tumbling down rabbit holes of googling for solutions,
and even after having learnt it it’s an annoying ceremony of activating/deactivating them each time I swap projects.</p>
<h2>pip?</h2>
<p>That’s one part of the problem, but specifying dependencies is a whole thing too.
<code>pip</code> is how we install dependencies
and specify which libraries we rely on so that others can use <strong>our</strong> code.
And it’s almost good, but manages to snatch defeat from the jaws of victory.</p>
<p>All it takes to install a dependency is <code>pip install [name]</code> which is just perfect.
But then I go store the list of dependencies with <code>pip freeze</code>
and hang on why am I seeing transient dependencies??</p>
<p>E.g. let’s say I want to use the <code>twisted</code> library:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(venv) python-virtualenv-experiment $ pip install twisted</div><div class="line">(venv) python-virtualenv-experiment $ pip freeze &gt; requirements.txt</div><div class="line">(venv) python-virtualenv-experiment $ cat requirements.txt</div><div class="line">constantly==15.1.0</div><div class="line">incremental==16.10.1</div><div class="line">Twisted==16.6.0</div><div class="line">zope.interface==4.3.3</div></pre></td></tr></table></figure>
<p>Why am I now responsible for <code>constantly</code>, <code>incremental</code>, and <code>zope</code>??
What do I do now? Delete those entries from the file?
Sure, but next time I add a dependency and re-freeze they’ll be back. Gah!</p>
<h2>Configuration</h2>
<blockquote class="pullquote right"><p>Python provides no solution for managing the configuration and use of a project.</p>
</blockquote>
<p>After all that’s said and done
we want to make it easy for others to use our project,
i.e. they should download our code and easily get up and running.</p>
<p>To ease the process of installing dependencies,
running tests,
and starting the application we use… nothing.
There’s no built-in solution for this.
Python, for all its &quot;batteries included” experience,
provides no solution for managing the configuration and use of a project.</p>
<p>Let’s say you’ve pulled a repository to help fix an issue,
what do you do then? Where do you start? How do you run its tests?
Maybe there’s a makefile, or .bat file, or who knows!?,
it’s going to be different for every project so you better read up on their documentation.
And hopefully the developers made their process compatible with your OS…</p>
<h1>A new approach</h1>
<p>These annoyances add up to make it much more difficult than necessary
to get started with and continue to use Python.
It’s a constant drain on productivity to continuously require activations of environments,
managing dependencies,
and remembering how individual projects are configured.</p>
<p>What if instead we had a tool that’s easy to learn,
that simplifies the management and installation of dependencies,
and allows everyone to get started immediately?</p>
<p>This tool already exists,
I came across it in the JavaScript community where it’s used to great success.
This whole article really boils down a simple dream: I want <code>pip</code> to be like JavaScript’s <code>npm</code>.</p>
<h2>npm</h2>
<blockquote class="pullquote right"><p>Let me say that again, <strong>no dependencies are installed to any global folder by default</strong>.</p>
</blockquote>
<p>If you’re unfamiliar with <code>npm</code> it’s the JavaScript package manager,
a command line interface tool to download JavaScript modules.
It exactly mirrors the role of our <code>pip</code>,
but crucially provides a well-rounded set of functionality
that dramatically lowers friction of dependency- and project-management compared to Python.</p>
<p><code>npm</code> forms the backbone of the JavaScript ecosystem by making it easy to start new projects,
jump in and improve existing projects,
specify and maintain dependencies, and allowing the running of tests and other related scripts.</p>
<p>It also does a lot more that’s unrelated to this article,
but despite having a broad set of functionality it manages to be very easy to learn.
I think because of these three reasons:</p>
<ul>
<li>
<p>Dependencies are always installed with a simple <code>npm install</code> command,
which makes it trivial to get started.
That’s the <strong>only</strong> command a new user has to learn to jump into JavaScript code.</p>
</li>
<li>
<p>Dependencies and all other configuration data is always stored in a <code>package.json</code> data file,
every JS developer quickly learns to read this file
and it specifies with simple clarity exactly which commands are available to run
and which direct dependencies the project has:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">js-experiment $ cat package.json</div><div class="line">&#123;</div><div class="line">  ...</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;test&quot;: &quot;karma start&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;express&quot;: &quot;^4.14.0&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li>
<p>And perhaps most importantly,
dependencies are stored in folder next to the <code>package.json</code> file.
Let me say that again, <strong>no dependencies are installed to any global folder by default</strong>!</p>
</li>
</ul>
<p>Together the result is an easy-to-learn system
because the only command to learn initially is <code>npm install</code>.
With that you can install dependencies and explore existing libraries,
and because it always installs to a local folder
there’s never a sense of “<em>Oh crap where did all my dependencies just go? What mess did I just create?</em>”.
Just delete the folder and start over.</p>
<blockquote class="pullquote right"><p>It’s actually <em>difficult</em> to do the wrong thing with this tool!</p>
</blockquote>
<p>Is it heretical to suggest changing where Python stores modules?
It’s this change that makes <code>virtualenv</code> superfluous,
because now any folder with a <code>package.json</code> file is inherently isolated.
And the massive benefit is how safe it becomes to experiment and learn,
because cause and effects are clear
and a reset is only a deleted folder away.</p>
<p>And BTW, when adding new dependencies (i.e. <code>npm install express</code>)
the command can <strong>automatically</strong> update the .json file.
It’s actually <em>difficult</em> to do the wrong thing with this tool!
This feeling of safety makes it fun to learn.</p>
<p>And finally <code>npm</code> exposes a way to run custom scripts,
with two named hooks explicitly exposed at the top-level: <code>npm test</code> and <code>npm start</code>.
Everyone configures those scripts to respectively run tests and start the package’s code,
and it’s the final piece that allows for this ecosystem to be easy to learn.
It means there are just two commands to be able to jump right into most JavaScript projects:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install</div><div class="line">$ npm test</div></pre></td></tr></table></figure>
<p>So simple.</p>
<p><code>npm</code> also supports running arbitrary scripts ala <code>npm run [name]</code>,
so it provides this great integrated solution for easily running all manner of scripts
like deploying, generating documentation, or anything at all really.</p>
<h1>In conclusion</h1>
<p>There’s more to <code>npm</code> than described here
(just one example is an incredibly nice <code>npm init</code> flow that scaffolds a new <code>package.json</code> by asking the user a short set of questions),
but today is just to focus on the core elements that makes Python’s project management a burden when JavaScript is easy.</p>
<p>In all the above examples I wish <code>pip</code> worked just like <code>npm</code>,
I wish I could <code>pip install selenium</code> and see it appear as a dependency in <code>package.json</code>,
I wish I could rely on the conventions of <code>pip install; pip test</code> to get started on other people’s code,
and I wish I could configure my own module’s <code>package.json</code> to make it easy for others to join in.</p>
<p>I dream that these changes are less drastic than they sound,
but the truth is I lack the insight to understand the ramifications of what I’m suggesting.
If you have arguments for supporting or rejecting these thoughts I’d love to hear them!,
I’m always striving to get closer to Python enlightenment and all feedback furthers that journey.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve long wished Python allowed easier handling of multiple projects and their dependencies.
You know how you create a folder, fill it with code, and want to share it with others?
Or maybe it’s a library to pull into your application as a dependency,
instead of making one huge monolithic product?
Python has &lt;code&gt;virtualenv&lt;/code&gt; and &lt;code&gt;pip&lt;/code&gt; for this,
&lt;code&gt;virtualenv&lt;/code&gt; for creating isolated environments
and &lt;code&gt;pip&lt;/code&gt; for downloading and managing dependencies.
But they are not easy to learn, nor easy to use daily,
and I dream of a better alternative.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>End-to-end Testing with WebdriverIO + Sauce Labs</title>
    <link href="http://jonlauridsen.com/blog/2016/end-to-end-testing-with-webdriverio-sauce-labs/"/>
    <id>http://jonlauridsen.com/blog/2016/end-to-end-testing-with-webdriverio-sauce-labs/</id>
    <published>2016-12-08T23:17:21.000Z</published>
    <updated>2017-04-17T10:21:01.623Z</updated>
    
    <content type="html"><![CDATA[<p>After writing an article on <a href="/blog/2016/selenium-testing-with-ruby-javascript-and-python/">Selenium testing with Ruby, JS, and Python</a> I needed to make it available somewhere,
and decided to host it from my own site.
But that meant adding new functionality,
and surely I’d want to test that functionality
given the topic I’m writing about!</p>
<p>However my site’s backend is JavaScript
and I wasn’t so fond of the JS framework for testing, so what to do?</p>
<a id="more"></a>
<p>Well,
with great timing <a href="http://www.kevinlamping.com" target="_blank" rel="external">Kevin Lamping</a> happened to tweet about how nice <a href="http://webdriver.io" target="_blank" rel="external">WebdriverIO</a> is,
so I went to give it a try since I had passed it over in my previous article.</p>
<blockquote class="twitter-tweet" data-conversation="none" data-lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/jonlauridsen" target="_blank" rel="external">@jonlauridsen</a> you&#39;ve got to check <a href="https://twitter.com/webdriverio" target="_blank" rel="external">@webdriverio</a> out. simplifies so many things</p>&mdash; Kevin Lamping (@klamping) <a href="https://twitter.com/klamping/status/800756403057082368" target="_blank" rel="external">November 21, 2016</a></blockquote> <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>I ended up using WebdriverIO as part of my fully automated deployment process,
by combining the continuous integration service <a href="http://travis-ci.org" target="_blank" rel="external">Travis</a>
and multi-browser testing service <a href="https://saucelabs.com" target="_blank" rel="external">Sauce Labs</a>.
With this article we’ll go through the details of setting it all up.</p>
<h1>Not so fast</h1>
<p>I did actually try WebdriverIO for my previous article,
but it threw errors during <code>npm install</code>
which left a bad taste so I gave it a pass.
That was a shame though,
because it turns out WebdriverIO is a great framework.</p>
<p>What actually went wrong is that a dependency of <code>webdriverio</code> needs to be compiled if you’re on Node 7,
and <strong>it</strong> can’t be compiled with Python 3 which happens to be my system default.
In hindsight it’s a simple fix (activate Python 2.7 for this project’s folder via <a href="https://github.com/yyuu/pyenv" target="_blank" rel="external"><code>pyenv</code></a>),
but it took a bit of work to figure out that this was the issue.</p>
<p>Travis fails to install the library for the same reason,
and configuring Travis to build the library proved difficult.
I actually gave up on this part and instead specified Node 6 for Travis’ configuration…
I’m unlikely to hit critical version differences
and hopefully no-one gets hurt from this subpar solution :)</p>
<h1>WebdriverIO</h1>
<p>Thankfully once it’s installed it works great.
WebdriverIO has a nice predictable DSL that results in simple and very readable page objects and tests:</p>
<script src="//gist.github.com/gaggle/01d9b9f6f71a31789d03a5f8a656481d.js"></script>
<script src="//gist.github.com/gaggle/a4a822ec5bea81a992157f77c9d628d6.js"></script>
<p>That’s all it took to get going with local <abbr title="End-to-end">E2E</abbr> tests,
really quite painless.</p>
<p>So, that’s the hard part done, right?</p>
<p>Not quite.</p>
<h1>Travis &amp; Sauce Labs</h1>
<p>UI tests need to run across multiple real browsers,
because only by running on browsers really used by customers can we know that things <strong>actually</strong> work.
But I don’t want to install and maintain a mess of browsers myself,
so we turn to services like <a href="https://saucelabs.com" target="_blank" rel="external">Sauce Labs</a>.</p>
<p>It took me a whole day getting all this working
but hopefully this article will get you going quickly.
There are basically three critical pieces of configuration to be aware of for success:</p>
<ul>
<li><strong>Correctly specify which browsers Sauce Labs should run</strong></li>
<li><strong>Ensure Sauce Labs browsers can see your site</strong></li>
<li><strong>Configure WebdriverIO to use Sauce Labs</strong></li>
</ul>
<p>First the basics though:
Sauce Labs’ credentials must be added to Travis,
this is done via Travis’ <a href="https://docs.travis-ci.com/user/environment-variables/#Defining-encrypted-variables-in-.travis.yml" target="_blank" rel="external">encrypted environment variables</a> system.
Then we must host the site from Travis’ <abbr title="Virtual machine">VM</abbr>
(in my case that means running my site generator’s server),
and set Travis to use “Sauce Connect”
(a secure tunnel that lets Sauce Labs visit locally hosted sites).</p>
<p>These are pretty simple steps to set up,
you can see <a href="https://github.com/gaggle/gaggle/blob/286d6bf4ddd9c1047b4433227acde0bdcff4161a/.travis.yml" target="_blank" rel="external"><code>travis.yml</code></a> for these settings.</p>
<h2>Browsers</h2>
<p>Next we need to specify which browsers Sauce Labs should use to run our tests.
WebdriverIO specifies a browser like this:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"safari-os-x-10.11-latest"</span>: &#123;</div><div class="line">    <span class="attr">"base"</span>: <span class="string">"SauceLabs"</span>,</div><div class="line">    <span class="attr">"browserName"</span>: <span class="string">"safari"</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"ui-safari-os-x-10.11-latest"</span>,</div><div class="line">    <span class="attr">"platform"</span>: <span class="string">"OS X 10.11"</span>,</div><div class="line">    <span class="attr">"version"</span>: <span class="string">"latest"</span>,</div><div class="line">    <span class="attr">"tunnel-identifier"</span>: [process.env.TRAVIS_JOB_NUMBER],</div><div class="line">    <span class="attr">"build"</span>: [process.env.TRAVIS_BUILD_NUMBER]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>But note how the key and <code>name</code> is duplicated and is a concatenation of the other data,
and <code>base</code> and some other fields are just static data.
It quickly becomes an inflexible mess to specify multiple browsers like this,
it’s more maintainable to <abbr title="Don't repeat yourself">DRY</abbr> it up
by <strong>generating</strong> the data WebdriverIO expects.
It’s not so important how that’s done
as long as we boil down our browser data to just the relevant bits.
Here’s the minimum configuration data I settled on:</p>
<script src="https://gist-it.appspot.com/github/gaggle/gaggle/blob/286d6bf4ddd9c1047b4433227acde0bdcff4161a/saucelabs-browsers.js?slice=3:8"></script>
<p>(You can <a href="https://github.com/gaggle/gaggle/blob/286d6bf4ddd9c1047b4433227acde0bdcff4161a/saucelabs-browsers.js" target="_blank" rel="external">see the full file</a> for how I generate the entire data structure)</p>
<h2>Enable Sauce Labs</h2>
<p>Then WebdriverIO needs to be configured to use Sauce Labs.
This boils down to configuring <code>wdio.conf.js</code>,
but doing so without <strong>requiring</strong> Sauce Labs
because then we’d lose the ability to run the tests locally.</p>
<p>It comes down to changing a handful of variables
depending on if Sauce Labs is present or not. Here’s how I did it:</p>
<script src="https://gist-it.appspot.com/github/gaggle/gaggle/blob/master/wdio.conf.js?slice=1:16"></script>
<p>With all that in place Travis now runs the tests per pull-request,
pretty sweet!</p>
<blockquote><img src="/blog/2016/end-to-end-testing-with-webdriverio-sauce-labs/github-pr-checks-passed.png" alt="Pull-request 41 with automated tests passing" title="Pull-request 41 with automated tests passing"><footer><strong>GitHub</strong><cite><a href="https://github.com/gaggle/gaggle/pull/41" target="_blank" rel="external">Pull-request 41 with automated tests passing</a></cite></footer></blockquote>
<h2>Stability</h2>
<p>At this point I recommend investing some time to be certain the tests are stable.
I made sure to work on a number of small incremental features,
each going into open pull-requests that I updated frequently.
This was to stress-test the UI tests against flakiness,
because having flaky tests is almost worse than no tests at all.</p>
<p>I also purposefully started with completely simple tests,
that way I could stress-test the process itself instead of having to debug the tests.
Thankfully the setup runs very stable, the tests basically always run correctly.</p>
<p>Wait, “<em>basically</em>”?</p>
<p>Yeah…</p>
<blockquote><img src="/blog/2016/end-to-end-testing-with-webdriverio-sauce-labs/saucelabs-almost-all-passing.png" alt="One test failed randomly" title="One test failed randomly"><footer><strong>SauceLabs</strong><cite><a href="https://saucelabs.com/beta/builds/474a9716d17f46be9a31dd090cda9766" target="_blank" rel="external">One test failed randomly</a></cite></footer></blockquote>
<p>That one red entry is where Microsoft Edge failed to start for no apparent reason,
and the only action I took was to manually re-invoke the Travis job.
That made everything pass just fine.
There are unfortunately so many moving parts glued together here
that invariably something fails.
Maybe a setting can be tweaked to help against this,
but for now it happens so rarely it’s not a real impediment.</p>
<p>It sure is annoying though!</p>
<h1>In the end</h1>
<p>So what’s the point of all this effort?</p>
<p>Well first of all it’s just fantastic seeing a pull-request marked green
knowing the site has just been tested on multiple real browsers.
It gives confidence that the code coming in isn’t totally ruining the product.</p>
<p>Another huge benefit is that we can visually inspect how the tests ran,
Sauce Labs captures screenshots of all the states
and we can play them back step by step.</p>
<blockquote><img src="/blog/2016/end-to-end-testing-with-webdriverio-sauce-labs/saucelabs-screenshot-431-ui-safari-os-x-10-11-latest.png" alt="Sauce Labs testing a page" title="Sauce Labs testing a page"><footer><strong>Sauce Labs</strong><cite><a href="https://saucelabs.com/beta/tests/4cc3effb11aa4cd8b04b4e8cb303ae1c/commands?enabledFilters=hasScreenshot#3" target="_blank" rel="external">Build 431 ui-safari-os-x-10-11-latest</a></cite></footer></blockquote>
<p>It’s very powerful to flip through the various screenshots to quickly do visual inspection.</p>
<p>As a side bonus we also get this nice badge to proudly display:</p>
<blockquote><img src="/blog/2016/end-to-end-testing-with-webdriverio-sauce-labs/saucelabs-badge.svg" alt="saucelabs-badge.svg" title=""><footer><strong>SauceLabs</strong><cite>Badge of browsers passing our tests</cite></footer></blockquote>
<h1>Conclusion</h1>
<p>Ultimately WebdriverIO and Sauce Labs are pleasant to work with,
despite taking a whole day to set up.
At least once it all works it works very nicely.</p>
<p>It’s a huge joy to have this completely automated continuous integration/deployment process,
and it’s already caught a couple dumb mistakes I was about to merge to master.</p>
<p>Special thanks to Travis and Sauce Labs for providing free tiers of their services,
it’s frankly unbelievable to have free access to professional-grade CI and cross-platform browser testing.</p>
<p>If you have any comments or questions <a href="https://twitter.com/jonlauridsen" target="_blank" rel="external">I’d love to hear them</a>,
and <a href="https://github.com/gaggle/gaggle" target="_blank" rel="external">all the code is freely available</a> if you’d like to play around yourself.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;After writing an article on &lt;a href=&quot;/blog/2016/selenium-testing-with-ruby-javascript-and-python/&quot;&gt;Selenium testing with Ruby, JS, and Python&lt;/a&gt; I needed to make it available somewhere,
and decided to host it from my own site.
But that meant adding new functionality,
and surely I’d want to test that functionality
given the topic I’m writing about!&lt;/p&gt;
&lt;p&gt;However my site’s backend is JavaScript
and I wasn’t so fond of the JS framework for testing, so what to do?&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Selenium Testing with Ruby, JS, and Python</title>
    <link href="http://jonlauridsen.com/blog/2016/selenium-testing-with-ruby-javascript-and-python/"/>
    <id>http://jonlauridsen.com/blog/2016/selenium-testing-with-ruby-javascript-and-python/</id>
    <published>2016-10-27T00:15:51.000Z</published>
    <updated>2017-04-17T10:21:01.627Z</updated>
    
    <content type="html"><![CDATA[<p>UI tests, E2E tests, acceptance tests,
I don’t care what we call them
but today we’re going to take a practical look at writing tests
that uses a real browser to find &amp; click on elements.</p>
<a id="more"></a>
<h1>Introduction</h1>
<p>We’ll cover the basics of getting started with UI testing,
and then write a test that really interacts with a web page.
I want to do this in Ruby, JavaScript, and Python,
to compare and contrast the differences of each language
and get a better understanding of the Selenium landscape.
My choices will invariably fall short for some,
but if you feel I missed something important let me know.</p>
<p><a href="http://docs.seleniumhq.org" title="Selenium - Web Browser Automation" target="_blank" rel="external">Selenium</a> is the <em>de facto</em> browser automation solution,
but it isn’t always easy to work with.
What we need is a representative automation challenge
that exercises areas of Selenium that can be tricky to work with,
but without being so complex that this blog needs to be a book.
Here is the automation challenge I’ve come up with:</p>
<ul>
<li>Open a Chrome browser in Incognito mode.</li>
<li>Go to <a href="https://the-internet.herokuapp.com/dynamic_loading/2" title="The Internet" target="_blank" rel="external">https://the-internet.herokuapp.com/dynamic_loading/2</a>.</li>
<li>Click the <code>start</code> button.</li>
<li>Assert that the <code>Hello World</code> element is present.</li>
<li>And do this using the <a href="http://martinfowler.com/bliki/PageObject.html" title="PageObject" target="_blank" rel="external">Page Object</a> pattern,
because testing always requires a great deal of complexity management.</li>
</ul>
<p>By requiring Chrome in Incognito mode we must configure the webdriver to pass proper arguments,
a small but classic hurdle to overcome.
And the “dynamic loading” example on <code>the-internet</code> deals with having to wait for an element,
which can be a tricky scenario.
And using Page Objects forces us to deal with abstractions,
even if they’re overkill for this specific challenge.</p>
<h1>Basics</h1>
<p>First lets solve the basics, can we open a webpage at all?
Roughly speaking we need to configure a test runner,
a test framework,
and a Selenium-backed framework for each of our projects,
and have a single command to execute tests.</p>
<h3>Ruby / WebDriver</h3>
<p>As always Ruby is easy to work with, these are the steps to get started:</p>
<ul>
<li>Install <a href="http://teamcapybara.github.io/capybara/" title="Capybara - Acceptance test framework for web applications" target="_blank" rel="external"><code>capybara</code></a> (test framework),
<a href="http://rspec.info" title="RSpec - Behaviour Driven Development for Ruby" target="_blank" rel="external"><code>rspec</code></a> (test runner)
and <a href="https://rubygems.org/gems/selenium-webdriver" title="WebDriver is a tool for writing automated tests of websites" target="_blank" rel="external"><code>selenium-webdriver</code></a> dependencies.</li>
<li>Copy-paste test example.</li>
<li>Run <code>rspec spec</code> command.</li>
</ul>
<p>And that’s it, hard to see how it can be done simpler.</p>
<p>Here’s a simple test that just opens Google:</p>
<script src="https://gist-it.appspot.com/github/gaggle/selenium-testing-across-languages/blob/master/ruby-capybara/spec/simple_spec.rb"></script>
<p>All in all pretty straightforward!</p>
<h2>JavaScript / WD</h2>
<p>JavaScript is growing and there is much beauty in its vibrant community.
But that also means growing pains,
manifesting as multiple viable choices and version incompatibilities.
I settled on <a href="http://admc.io/wd" title="WD - A node.js client for webdriver/selenium 2" target="_blank" rel="external"><code>wd</code></a> since that worked out of the box,
but still struggled to put together a solution that just worked.
Where Ruby took minutes, this ended up taking more than an hour to complete the full exercise.</p>
<ul>
<li>Specify <a href="http://chaijs.com" title="Chai Assertion Library" target="_blank" rel="external"><code>chai</code></a> + <a href="https://github.com/domenic/chai-as-promised" title="Chai-as-promised - Extends Chai with assertions about promises" target="_blank" rel="external"><code>chai-as-promised</code></a>
(assertion libraries),
<a href="https://mochajs.org" title="Mocha - the fun, simple, flexible JavaScript test framework" target="_blank" rel="external"><code>mocha</code></a> (test runner),
<a href="http://admc.io/wd" title="WD - A node.js client for webdriver/selenium 2" target="_blank" rel="external"><code>wd</code></a> (webdriver)
and <a href="https://www.npmjs.com/package/selenium-standalone" title="Selenium Standalone Server" target="_blank" rel="external"><code>selenium-standalone</code></a> as dependencies.</li>
<li>Hm, website doesn’t have a simple example to copy,
but a lengthy file in their repo can be pruned down with a bit of effort.</li>
<li>Hm, the Selenium standalone server must be started in one terminal window
and the tests in another…</li>
<li>Add <a href="http://gulpjs.com" title="gulp.js - the streaming build system" target="_blank" rel="external"><code>gulp</code></a> (build tool) as dependency,
and have it run the server and tests simultaneously
so we don’t have to juggle multiple terminal windows.</li>
<li>Run <code>npm test</code></li>
</ul>
<p>It’s not so bad once everything works,
but it sure took longer to get here than I’d like.
This is the simple test:</p>
<script src="https://gist-it.appspot.com/github/gaggle/selenium-testing-across-languages/blob/master/js-wd/test/simple-specs.js"></script>
<h2>Python / Selenium-py</h2>
<p>As usual Python comes batteries included,
the only dependency is the Selenium framework itself.
Very nice!
Unfortunately we do have to deal with Python’s cumbersome dependency system,
but that’s an annoyance for another article.
Here are the steps:</p>
<ul>
<li>Create and activate a “virtualenv”
(a concept of isolating from your global Python installation
so your dependencies are confined to the project’s directory.
It’s a boring technicality).</li>
<li>Install <a href="https://seleniumhq.github.io/selenium/docs/api/py/index.html" title="Selenium Client Driver" target="_blank" rel="external"><code>selenium-py</code></a> as a dependency
(and remember to manually pipe that dependency into a <code>requirements.txt</code> file, ZZzzz).</li>
<li>Pretty much copy-paste example from website.</li>
<li>Run <code>python -m unittest discover test</code>.
Jeez that’s a mouthful, and it only works if the virtualenv is active…</li>
<li>Create a <code>runtests.sh</code> script to automate those steps.
Too bad that won’t work on Windows.</li>
</ul>
<p>Well, that wasn’t <strong>too</strong> terrible, and the test sure looks elegant:</p>
<script src="https://gist-it.appspot.com/github/gaggle/selenium-testing-across-languages/blob/master/py-selenium/test/test_simple.py"></script>
<h1>The Real Challenge</h1>
<p>Now to turn the simple test into one that solves our challenge.</p>
<h2>Ruby / WebDriver</h2>
<p>First lets extract configuration data to a separate file:</p>
<script src="https://gist-it.appspot.com/github/gaggle/selenium-testing-across-languages/blob/master/ruby-capybara/spec/spec_helper.rb"></script>
<p>And create a very simple page object,
thanks to Capybara’s powerful DSL:</p>
<script src="https://gist-it.appspot.com/github/gaggle/selenium-testing-across-languages/blob/master/ruby-capybara/spec/pages.rb"></script>
<p>That leaves our challenge test, which is very minimal:</p>
<script src="https://gist-it.appspot.com/github/gaggle/selenium-testing-across-languages/blob/master/ruby-capybara/spec/challenge_spec.rb"></script>
<h3>JavaScript / WD</h3>
<p>A nice side-effect of extracting configuration
is that we can also scoop out all that top-heavy module importing/glueing
that clutters the test:</p>
<script src="https://gist-it.appspot.com/github/gaggle/selenium-testing-across-languages/blob/master/js-wd/test/conf.js"></script>
<p>And all the selectors and other page-specific complexities go into the page object file:</p>
<script src="https://gist-it.appspot.com/github/gaggle/selenium-testing-across-languages/blob/master/js-wd/test/pages.js"></script>
<p>Which just leaves the test,
and despite the presence of some boilerplate the test itself is very minimal:</p>
<script src="https://gist-it.appspot.com/github/gaggle/selenium-testing-across-languages/blob/master/js-wd/test/challenge-specs.js"></script>
<h3>Python / Selenium-py</h3>
<p>Once again we extract configuration and page object:</p>
<script src="https://gist-it.appspot.com/github/gaggle/selenium-testing-across-languages/blob/master/py-selenium/test/conf.py"></script>
<script src="https://gist-it.appspot.com/github/gaggle/selenium-testing-across-languages/blob/master/py-selenium/test/pages.py"></script>
<p>Resulting in a very clean test file:</p>
<script src="https://gist-it.appspot.com/github/gaggle/selenium-testing-across-languages/blob/master/py-selenium/test/test_challenge.py"></script>
<h2>In conclusion</h2>
<p>So that’s three different takes on UI tests.
If you have any comments or questions <a href="https://twitter.com/jonlauridsen" target="_blank" rel="external">I’d love to hear them</a>,
and <a href="https://github.com/gaggle/selenium-testing-across-languages" title="Selenium testing across languages" target="_blank" rel="external">all the code is available</a> if you’d like to test these things out yourself.</p>
<p>The results of this fits my preconceived stereotypes of each language:
<strong>Ruby</strong> is easy to get started with and easy to use,
generally my first implementation would just work.
<strong>Javascript</strong> is a smorgasbord of choice and everything is amazingly decoupled,
but you have to glue it all together
and the result is more verbose than what I consider ideal.
And <strong>Python</strong> is actually very clean and easy to use,
but with a slight detracting complexity in configuring its environment
and I broke Windows compatibility.</p>
<p>For future reference here are my system versions:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ ruby -v</div><div class="line">ruby 2.3.0p0 (2015-12-25 revision 53290) [x86_64-darwin15]</div><div class="line"></div><div class="line">$ npm version</div><div class="line">&#123; npm: &apos;4.0.1&apos;,</div><div class="line">ares: &apos;1.10.1-DEV&apos;,</div><div class="line">http_parser: &apos;2.7.0&apos;,</div><div class="line">icu: &apos;57.1&apos;,</div><div class="line">modules: &apos;51&apos;,</div><div class="line">node: &apos;7.0.0&apos;,</div><div class="line">openssl: &apos;1.0.2j&apos;,</div><div class="line">uv: &apos;1.9.1&apos;,</div><div class="line">v8: &apos;5.4.500.36&apos;,</div><div class="line">zlib: &apos;1.2.8&apos; &#125;</div><div class="line"></div><div class="line">$ python --version</div><div class="line">Python 3.5.2</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UI tests, E2E tests, acceptance tests,
I don’t care what we call them
but today we’re going to take a practical look at writing tests
that uses a real browser to find &amp;amp; click on elements.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
